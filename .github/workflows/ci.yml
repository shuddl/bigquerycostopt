name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort
        pip install -e .
    
    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: |
        black --check src tests
    
    - name: Check imports with isort
      run: |
        isort --check-only --profile black src tests
  
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e .
    
    - name: Test with pytest
      run: |
        pytest --cov=src tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
  
  build:
    name: Build Container
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Set image name and version
      id: image
      run: |
        IMAGE_NAME=bqcostopt-api
        BRANCH=${GITHUB_REF#refs/heads/}
        
        if [[ "$BRANCH" == "main" ]]; then
          # For main branch, tag with 'latest' and version from setup.py
          VERSION=$(grep -m1 "version=" setup.py | cut -d'"' -f2)
          echo "tags=$IMAGE_NAME:latest,$IMAGE_NAME:$VERSION" >> $GITHUB_OUTPUT
        else
          # For other branches, tag with branch name
          VERSION=$BRANCH
          echo "tags=$IMAGE_NAME:$VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ steps.image.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/api-image.tar
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: api-container
        path: /tmp/api-image.tar

  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
    
    - name: Terraform Format
      run: terraform fmt -check -recursive infra/terraform
    
    - name: Terraform Init - Dev
      run: |
        cd infra/terraform/environments/dev
        terraform init -backend=false
    
    - name: Terraform Validate - Dev
      run: |
        cd infra/terraform/environments/dev
        terraform validate
    
    - name: Terraform Init - Prod
      run: |
        cd infra/terraform/environments/prod
        terraform init -backend=false
    
    - name: Terraform Validate - Prod
      run: |
        cd infra/terraform/environments/prod
        terraform validate